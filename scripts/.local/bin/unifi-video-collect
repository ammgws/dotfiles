#!/usr/bin/env fish

# Downloads all the videos recorded by Unifi Video between two dates
# Requires ssh access via the `unifi-video` user, since (at least on my setup) only that user can read the video files
# Create .ssh folder in /usr/lib/unifi-video and add your ssh key to authorized_keys

function print_help
    echo "Usage: unifi-video-collect [options]"
    echo "Required Options:"
    echo (set_color green)"--server"(set_color $fish_color_normal)": NVR server name or IP address"
    echo (set_color green)"--recordings-folder"(set_color $fish_color_normal)": Full path on server to the recordings dir (Settings->System Configuration->Recording Path)"
    echo (set_color green)"--camera"(set_color $fish_color_normal)": fetch videos for this camera ID"
    echo (set_color green)"--from"(set_color $fish_color_normal)": start datetime in the format YYYYmmdd HHMM"
    echo (set_color green)"--to"(set_color $fish_color_normal)": end datetime in the format YYYYmmdd HHMM"
end

argparse --name unifi-video-collect h/help 'camera=' 'server=' 'recordings-folder=' 'from=' 'to=' 'outputdir=' -- $argv
or return 1

if set -lq _flag_help
    print_help
    return
end

if set -lq _flag_server
    set server $_flag_server
else
    echo "--server is required"
    return 1
end

if set -lq _flag_recordings_folder
    set recordings_folder $_flag_recordings_folder
else
    echo "--recordings-folder is required"
    return 1
end

if set -lq _flag_camera
    set camera $_flag_camera
else
    echo "--camera is required"
    return 1
end

if set -lq _flag_from
    set from_date $_flag_from
else
    echo "--from is required"
    return 1
end

if set -lq _flag_to
    set to_date $_flag_to
else
    echo "--to is required"
    return 1
end

if set -lq _flag_outputdir
    set output_dir $_flag_outputdir
else
    set output_dir (mktemp --directory --tmpdir unifivideo.XXXXXXXXXX)
end

# example folder name:
# /mnt/storage/videos/75ce7ab4-ddab-32e7-aeda-df3467f87916/2022/02/13
set start_date_folder $recordings_folder/$camera/(date --date "$from_date" +"%Y/%m/%d")
set end_date_folder $recordings_folder/$camera/(date --date "$to_date" +"%Y/%m/%d")
set start_timestamp (date --date "$from_date" +"%s")
set end_timestamp (date --date "$to_date" +"%s")

echo "Getting videos for "(date --date "$from_date" +'%Y/%m/%d %H:%M')" to "(date --date "$to_date" +'%Y/%m/%d %H:%M')
echo "(Timestamps: $start_timestamp to $end_timestamp)"

# example filename:
# /mnt/storage/videos/75ce7ab4-ddab-32e7-aeda-df3467f87916/2022/02/13/1644791631169_1644791633169_1631691600602_13100729057.mp4
set start_date_videos (ssh unifi-video@$server -o 'BatchMode yes' ls -dp "$start_date_folder/*.mp4")
set end_date_videos (ssh unifi-video@$server -o 'BatchMode yes' ls -dp "$end_date_folder/*.mp4")

# TODO: see if rsync with list of files given to --files-from is faster?
echo "Start folder has "(count $start_date_videos)" videos"
for f in $start_date_videos
    set video_timestamp (string sub --end 10 (basename $f))
    if test $video_timestamp -ge $start_timestamp
        # seems to keep writing to the same folder even a few hours into the next day
        if test $video_timestamp -le $end_timestamp
            scp unifi-video@$server:$f $output_dir
        end
    end
end

echo "End folder has "(count $end_date_videos)" videos"
for f in $end_date_videos
    set video_timestamp (string sub --end 10 (basename $f))
    if test $video_timestamp -le $end_timestamp
        scp unifi-video@$server:$f $output_dir
    end
end

echo "Videos saved to $output_dir!"
