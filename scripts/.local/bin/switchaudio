#!/usr/bin/env fish

# Switch between audio devices and move all current audio outputs to the new device.

# TODO: replace pactl dance with simple call to `qpctl set-default` ?
# https://www.reddit.com/r/swaywm/comments/w3llwx/getting_volume_level_from_pipewire/ih02v7k/

set valid_devices headphones upstairs_speakers downstairs_speakers bluetooth TV
complete --command switchaudio --exclusive --long device --arguments "$valid_devices"

function print_help
    echo "Usage: switchaudio [options]"
    echo "Options:"
    echo (set_color green)"-d/--device"(set_color $fish_color_normal)": Switch to the specified device."
    echo (set_color green)"-k/--keep"(set_color $fish_color_normal)": Switch audio device but leave current sinks alone."
    echo (set_color green)"-m/--menu"(set_color $fish_color_normal)": Display menu to choose from."
end

argparse --name switchaudio h/help m/menu k/keep 'd/device=' -- $argv
or return 1

if set -lq _flag_help
    print_help
    return
end

if set -lq _flag_device
    set device $_flag_device
end

if set -lq _flag_keep
    set keep_sinks 1
end

# use menu by default for now. Add in terminal menu later.
set use_menu 1
if set -lq _flag_menu
    set use_menu 1
end

if string length --quiet $device
    if not contains $device $valid_devices
        echo "'$device' not valid, must be one of '$valid_devices'" >&2
        return 1
    end
end

function prettify_name --argument-names sink_raw_name
    # pipewire uses underscores instead of colons, so just replace them in case we are using  pulseaudio again for some reason
    set sn (string replace --all ':' '_' $sink_raw_name)
    if string match --quiet '*Pebbles*' $sink_raw_name
        echo upstairs_speakers
    else if string match --quiet '*Sound_Blaster_Play*' $sink_raw_name
        echo downstairs_speakers
    else if string match --quiet 'alsa_output.pci-0000_00_1b.0.analog-stereo' $sink_raw_name
        echo headphones
    else if string match --quiet '*PCH*' $sink_raw_name
        echo headphones
    else if string match --quiet 'alsa_output.pci-0000_00_1f.3.analog-stereo' $sink_raw_name
        echo headphones
    else if string match --quiet 'bluez_sink*' $sink_raw_name
        echo bluetooth
    else if string match --quiet 'alsa_output.pci-0000_01_00.1.hdmi-stereo-extra*' $sink_raw_name
        echo TV
    else
        echo $sink_raw_name
    end
end

function get_icon --argument-names output_device
    switch $output_device
        case headphones
            echo "ðŸŽ§"
        case speakers
            echo "ðŸ”ˆ"
        case bluetooth
            echo BT
        case TV
            echo "ðŸ“º"
        case '*'
            echo "??"
    end
end

# reminder: can rewrite to be 100% robust once the PR below makes it into a release
# https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/merge_requests/497
function get_sink_volume --argument-names sink_name
    pactl get-sink-volume "$sink_name" | string replace --regex --filter ".* (\d+)%.*" '$1'
end

set sinks (pactl list short sinks 2> /dev/null)
if test $status -ne 0
    echo "Error calling `pactl`" >&2
    return 1
end
set current_default_sink_name (pactl get-default-sink)
set current_default_sink_volume (get_sink_volume $current_default_sink_name)
echo "Cur: $current_default_sink_name"

if not set --query device
    for sink in $sinks
        set sink_info (string split \t $sink)
        set sink_name $sink_info[2]
        set sink_name_pretty (prettify_name $sink_name)
        if test "$sink_name" = "$current_default_sink_name"
            set sink_name_pretty "$sink_name_pretty (current)"
        end
        set device_choices (string join "\n" $device_choices $sink_name_pretty)
    end
    if set --query SSH_CLIENT
        set device (echo -e "$device_choices" | fzf)
    else
        #set device (echo -e "$device_choices" | bemenu --ignorecase --wrap --index 1 --prompt "Select new sound output:" --monitor all)
        set device (echo -e "$device_choices" | wofi --show dmenu --prompt 'Select new sound output device:')
    end
    set device (string split --fields 1 "(current)" -- $device | string trim)
    if not string length --quiet $device
        echo "no device selected" >&2
        return 1
    end
end

for sink in $sinks
    set sink_info (string split \t $sink)
    set sink_id $sink_info[1]
    set sink_name $sink_info[2]
    set sink_name_pretty (prettify_name $sink_name)
    set sink_state $sink_info[5]
    if string match --quiet "$sink_name_pretty" "$device"
        set new_default_sink_name $sink_name
        set new_default_sink_name_pretty $sink_name_pretty
        break
    end
end

if not string length --quiet $new_default_sink_name
    echo "Default sink not changed. Is '$device' actually available?" >&2
    return 1
end

# If the output we switch to is not set as default then the
# system volume slider controls will not affect it.
pactl set-default-sink $new_default_sink_name
or return 1
set new_default_sink_name_check (pactl get-default-sink)
if string match --quiet "$new_default_sink_name" "$new_default_sink_name_check"
    echo "New: $new_default_sink_name"
else
    echo "Something went wrong - set-default-sink has fallen back to $new_default_sink_name_check"
    return 1
end

# For the TV, ensure the card profile is set to the correct HDMI port, otherwise we get no sound.
# Note: changing the card profile will possibly change the sink name, so better do it afterwards to be safe.
#       e.g. alsa_output.pci-0000_01_00.1.hdmi-stereo-extra4 vs alsa_output.pci-0000_01_00.1.hdmi-stereo-extra5
# TODO: rewrite once PulseAudio JSON output is available (v16?)
if test "$new_default_sink_name_pretty" = TV
    # Get the first profile listed after "Part of profile(s):" for the HDMI port the TV is connected to.
    # Will probably be 'output:hdmi-stereo-extra*'. TODO: Will I ever want the non-stereo profiles?
    set HDMI_card_name "alsa_card.pci-0000_01_00.1"
    set TV_model_name "LG TV"
    set TV_hdmi_port_profile (pactl list cards | \
        grep --after-context=100 "Name: $HDMI_card_name" | \
        sed '/Card/Q' | \
        grep --after-context=1 "$TV_model_name" | \
        string match --regex '(output:hdmi-[^,]+)')[2]
    or return 9

    pactl set-card-profile $HDMI_card_name $TV_hdmi_port_profile
    set new_default_sink_name_check (pactl get-default-sink)
    echo "Changed card profile to '$TV_hdmi_port_profile' (sink name: $new_default_sink_name_check)"
end

if test $current_default_sink_volume -gt 100
    set new_sink_volume 100
else
    set new_sink_volume $current_default_sink_volume
end
pactl set-sink-volume @DEFAULT_SINK@ "$new_sink_volume%"

if not set --query keep_sinks
    set inputs (pactl list short sink-inputs)
    for input in $inputs
        set input_id (string split --field 1 \t $input)
        pactl move-sink-input $input_id @DEFAULT_SINK@
    end
end

echo "Successfully changed default sink to '$device'!"
